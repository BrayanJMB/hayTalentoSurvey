// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProyectoIdentity.Datos;

#nullable disable

namespace ProyectoIdentity.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221231054755_AddDemographic5")]
    partial class AddDemographic5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.Area", b =>
                {
                    b.Property<string>("AreaName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AreaName");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.BusinessUnit", b =>
                {
                    b.Property<string>("NameBusinnes")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NameBusinnes");

                    b.ToTable("BusinessUnit");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("NombreCategoria")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categoria");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NombreCategoria = "Beneficios de Calidad de Vida"
                        },
                        new
                        {
                            Id = 2,
                            NombreCategoria = "Beneficios Monetarios y No Monetarios"
                        },
                        new
                        {
                            Id = 3,
                            NombreCategoria = "Beneficios de Desarrollo Personal"
                        },
                        new
                        {
                            Id = 4,
                            NombreCategoria = "Beneficios en Herramientas de Trabajo"
                        },
                        new
                        {
                            Id = 5,
                            NombreCategoria = "Beneficios/Madurez"
                        });
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.City", b =>
                {
                    b.Property<string>("CityName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CountryId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CityName");

                    b.HasIndex("CountryId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            CityName = "Bogotá",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Medellín",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Cali",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Barranquilla",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Cartagena",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Soledad",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Cúcuta",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Ibagué",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Soacha",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Villavicencio",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Bucaramanga",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Santa Marta",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Valledupar",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Bello",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Pereira",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Montería",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Pasto",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Buenaventura",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Manizales",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Neiva",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Palmira",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Riohacha",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Sincelejo",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Popayán",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Itagüí",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Floridablanca",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Envigado",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Tuluá",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "San Andrés de Tumaco",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Dosquebradas",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Apartadó",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Tunja",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Girón",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Uribia",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Barrancabermeja",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Florencia",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Turbo",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Maicao",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Piedecuesta",
                            CountryId = "Colombia"
                        },
                        new
                        {
                            CityName = "Yopal",
                            CountryId = "Colombia"
                        });
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.Country", b =>
                {
                    b.Property<string>("CountryName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CountryName");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            CountryName = "Antigua y Barbuda"
                        },
                        new
                        {
                            CountryName = "Argentina"
                        },
                        new
                        {
                            CountryName = "Bahamas"
                        },
                        new
                        {
                            CountryName = "Barbados"
                        },
                        new
                        {
                            CountryName = "Belice"
                        },
                        new
                        {
                            CountryName = "Bolivia"
                        },
                        new
                        {
                            CountryName = "Brasil"
                        },
                        new
                        {
                            CountryName = "Canadá"
                        },
                        new
                        {
                            CountryName = "Chile"
                        },
                        new
                        {
                            CountryName = "Colombia"
                        },
                        new
                        {
                            CountryName = "Costa Rica"
                        },
                        new
                        {
                            CountryName = "Cuba"
                        },
                        new
                        {
                            CountryName = "Dominica"
                        },
                        new
                        {
                            CountryName = "Ecuador"
                        },
                        new
                        {
                            CountryName = "El Salvador"
                        },
                        new
                        {
                            CountryName = "Estados Unidos"
                        },
                        new
                        {
                            CountryName = "Granada"
                        },
                        new
                        {
                            CountryName = "Guatemala"
                        },
                        new
                        {
                            CountryName = "Guyana"
                        },
                        new
                        {
                            CountryName = "Haití"
                        },
                        new
                        {
                            CountryName = "Honduras"
                        },
                        new
                        {
                            CountryName = "Jamaica"
                        },
                        new
                        {
                            CountryName = "México"
                        },
                        new
                        {
                            CountryName = "Nicaragua"
                        },
                        new
                        {
                            CountryName = "Panamá"
                        },
                        new
                        {
                            CountryName = "Paraguay"
                        },
                        new
                        {
                            CountryName = "Perú"
                        },
                        new
                        {
                            CountryName = "República Dominicana"
                        },
                        new
                        {
                            CountryName = "San Cristóbal y Nieves"
                        },
                        new
                        {
                            CountryName = "San Vicente y las Granadinas"
                        },
                        new
                        {
                            CountryName = "Santa Lucía"
                        },
                        new
                        {
                            CountryName = "Surinam"
                        },
                        new
                        {
                            CountryName = "Trinidad y Tobago"
                        },
                        new
                        {
                            CountryName = "Uruguay"
                        },
                        new
                        {
                            CountryName = "Venezuela"
                        });
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.Demograficos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IdEncuesta")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroDemografico")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdEncuesta");

                    b.ToTable("Demograficos");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.Encuesta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DescripcionEncuesta")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("FechaDeCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaMaximoPlazo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreEncuesta")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Encuesta");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.EncuestaArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AreaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EncuestaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("EncuestaId");

                    b.ToTable("EncuestaArea");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.EncuestaBussines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BusinessUnitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EncuestaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("EncuestaId");

                    b.ToTable("EncuestaBussines");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.EncuestaCategoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<int>("EncuestaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("EncuestaId");

                    b.ToTable("EncuestaCategoria");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.EncuestaRepondente", b =>
                {
                    b.Property<int>("EncuestaId")
                        .HasColumnType("int");

                    b.Property<Guid>("RespondenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaRespuesta")
                        .HasColumnType("datetime2");

                    b.HasKey("EncuestaId", "RespondenteId");

                    b.HasIndex("RespondenteId");

                    b.ToTable("EncuestaRepondente");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.Opcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("NumeroOpcion")
                        .HasColumnType("int");

                    b.Property<int>("PreguntaId")
                        .HasColumnType("int");

                    b.Property<float>("ValorOpcion")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PreguntaId");

                    b.ToTable("Opcion");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.OpcionesDemo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DemograficoId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DemograficoId");

                    b.ToTable("OpcionesDemo");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.Pregunta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DescripcionPregunta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EncuestaCategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("NombrePregunta")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("NumeroPregunta")
                        .HasColumnType("int");

                    b.Property<int>("TipoPreguntaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EncuestaCategoriaId");

                    b.HasIndex("TipoPreguntaId");

                    b.ToTable("Pregunta");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.Respondente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AreaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BussinesUnitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CountryId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("BussinesUnitId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Respondente");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.RespondenteDemografico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DemograficosId")
                        .HasColumnType("int");

                    b.Property<Guid>("RespondenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Respuesta")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DemograficosId");

                    b.HasIndex("RespondenteId");

                    b.ToTable("RespondenteDemografico");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.Respuesta", b =>
                {
                    b.Property<int>("PreguntaId")
                        .HasColumnType("int");

                    b.Property<Guid>("RespondenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescripcionRespuesta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Valor")
                        .HasColumnType("real");

                    b.HasKey("PreguntaId", "RespondenteId");

                    b.HasIndex("RespondenteId");

                    b.ToTable("Respuesta");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.TipoPregunta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("NombreTipoPregunta")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TipoPregunta");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NombreTipoPregunta = "Respuesta Unica"
                        },
                        new
                        {
                            Id = 2,
                            NombreTipoPregunta = "Likkert"
                        },
                        new
                        {
                            Id = 3,
                            NombreTipoPregunta = "Seleccion Multiple"
                        },
                        new
                        {
                            Id = 4,
                            NombreTipoPregunta = "Valoracion Multiple"
                        },
                        new
                        {
                            Id = 5,
                            NombreTipoPregunta = "Abierta"
                        },
                        new
                        {
                            Id = 6,
                            NombreTipoPregunta = "Multiple Likkert"
                        });
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.Company", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Adress")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PersonFullName")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.City", b =>
                {
                    b.HasOne("ProyectoIdentity.Models.ModelsJourney.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.Demograficos", b =>
                {
                    b.HasOne("ProyectoIdentity.Models.ModelsJourney.Encuesta", "Encuesta")
                        .WithMany("Demograficos")
                        .HasForeignKey("IdEncuesta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Encuesta");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.Encuesta", b =>
                {
                    b.HasOne("ProyectoIdentity.Models.ModelsJourney.Company", "Company")
                        .WithMany("Encuestas")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.EncuestaArea", b =>
                {
                    b.HasOne("ProyectoIdentity.Models.ModelsJourney.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId");

                    b.HasOne("ProyectoIdentity.Models.ModelsJourney.Encuesta", "Encuesta")
                        .WithMany("EncuestaAreas")
                        .HasForeignKey("EncuestaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Encuesta");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.EncuestaBussines", b =>
                {
                    b.HasOne("ProyectoIdentity.Models.ModelsJourney.BusinessUnit", "BusinessUnit")
                        .WithMany()
                        .HasForeignKey("BusinessUnitId");

                    b.HasOne("ProyectoIdentity.Models.ModelsJourney.Encuesta", "Encuesta")
                        .WithMany("EncuestaBussines")
                        .HasForeignKey("EncuestaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessUnit");

                    b.Navigation("Encuesta");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.EncuestaCategoria", b =>
                {
                    b.HasOne("ProyectoIdentity.Models.ModelsJourney.Categoria", "Categoria")
                        .WithMany("EncuestaCategoria")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProyectoIdentity.Models.ModelsJourney.Encuesta", "Encuesta")
                        .WithMany("EncuestaCategorias")
                        .HasForeignKey("EncuestaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Encuesta");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.EncuestaRepondente", b =>
                {
                    b.HasOne("ProyectoIdentity.Models.ModelsJourney.Encuesta", null)
                        .WithMany("EncuestaRepondente")
                        .HasForeignKey("EncuestaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProyectoIdentity.Models.ModelsJourney.Respondente", null)
                        .WithMany("EncuestaRepondente")
                        .HasForeignKey("RespondenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.Opcion", b =>
                {
                    b.HasOne("ProyectoIdentity.Models.ModelsJourney.Pregunta", "Pregunta")
                        .WithMany("Opciones")
                        .HasForeignKey("PreguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pregunta");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.OpcionesDemo", b =>
                {
                    b.HasOne("ProyectoIdentity.Models.ModelsJourney.Demograficos", "Demograficos")
                        .WithMany("OpcionesDemo")
                        .HasForeignKey("DemograficoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demograficos");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.Pregunta", b =>
                {
                    b.HasOne("ProyectoIdentity.Models.ModelsJourney.EncuestaCategoria", "EncuestaCategoria")
                        .WithMany("Preguntas")
                        .HasForeignKey("EncuestaCategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProyectoIdentity.Models.ModelsJourney.TipoPregunta", "TipoPregunta")
                        .WithMany("Pregunta")
                        .HasForeignKey("TipoPreguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EncuestaCategoria");

                    b.Navigation("TipoPregunta");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.Respondente", b =>
                {
                    b.HasOne("ProyectoIdentity.Models.ModelsJourney.Area", "Area")
                        .WithMany("Respondentes")
                        .HasForeignKey("AreaId");

                    b.HasOne("ProyectoIdentity.Models.ModelsJourney.BusinessUnit", "BusinessUnit")
                        .WithMany("Respondentes")
                        .HasForeignKey("BussinesUnitId");

                    b.HasOne("ProyectoIdentity.Models.ModelsJourney.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("ProyectoIdentity.Models.ModelsJourney.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Area");

                    b.Navigation("BusinessUnit");

                    b.Navigation("City");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.RespondenteDemografico", b =>
                {
                    b.HasOne("ProyectoIdentity.Models.ModelsJourney.Demograficos", "Demograficos")
                        .WithMany("RespondenteDemograficos")
                        .HasForeignKey("DemograficosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProyectoIdentity.Models.ModelsJourney.Respondente", "Respondente")
                        .WithMany("RespondenteDemograficos")
                        .HasForeignKey("RespondenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demograficos");

                    b.Navigation("Respondente");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.Respuesta", b =>
                {
                    b.HasOne("ProyectoIdentity.Models.ModelsJourney.Pregunta", "Pregunta")
                        .WithMany("Respuestas")
                        .HasForeignKey("PreguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProyectoIdentity.Models.ModelsJourney.Respondente", "Respondente")
                        .WithMany("Respuestas")
                        .HasForeignKey("RespondenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pregunta");

                    b.Navigation("Respondente");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.Area", b =>
                {
                    b.Navigation("Respondentes");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.BusinessUnit", b =>
                {
                    b.Navigation("Respondentes");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.Categoria", b =>
                {
                    b.Navigation("EncuestaCategoria");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.Demograficos", b =>
                {
                    b.Navigation("OpcionesDemo");

                    b.Navigation("RespondenteDemograficos");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.Encuesta", b =>
                {
                    b.Navigation("Demograficos");

                    b.Navigation("EncuestaAreas");

                    b.Navigation("EncuestaBussines");

                    b.Navigation("EncuestaCategorias");

                    b.Navigation("EncuestaRepondente");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.EncuestaCategoria", b =>
                {
                    b.Navigation("Preguntas");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.Pregunta", b =>
                {
                    b.Navigation("Opciones");

                    b.Navigation("Respuestas");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.Respondente", b =>
                {
                    b.Navigation("EncuestaRepondente");

                    b.Navigation("RespondenteDemograficos");

                    b.Navigation("Respuestas");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.TipoPregunta", b =>
                {
                    b.Navigation("Pregunta");
                });

            modelBuilder.Entity("ProyectoIdentity.Models.ModelsJourney.Company", b =>
                {
                    b.Navigation("Encuestas");
                });
#pragma warning restore 612, 618
        }
    }
}
